{"version":3,"file":"functions.js","mappings":"yBAgFAA,gBAAgBC,UAAU,OApEnB,SAAaC,EAAOC,GACzB,OAAOD,EAAQC,CACjB,IAmEAH,gBAAgBC,UAAU,SA5DnB,SAAeG,GACpB,IAAMC,EAAQC,aAAY,WACxB,IAAMC,GAcD,IAAIC,MAAOC,qBAbhBL,EAAWM,UAAUH,EACvB,GAAG,KAEHH,EAAWO,WAAa,WACtBC,cAAcP,EAChB,CACF,IAoDAL,gBAAgBC,UAAU,aApCnB,SAAmBY,EAAaT,GACrC,IAAIU,EAAS,EACPT,EAAQC,aAAY,WACxBQ,GAAUD,EACVT,EAAWM,UAAUI,EACvB,GAAG,KAEHV,EAAWO,WAAa,WACtBC,cAAcP,EAChB,CACF,IA2BAL,gBAAgBC,UAAU,OAnBnB,SAAoBc,GAGzB,OAFAC,QAAQC,IAAIF,GAELA,CACT,IAgBAf,gBAAgBC,UAAU,WARnB,SAAiBC,GACtB,OC3EK,SAAsBA,GAC3B,OAAOA,EAAQ,CACjB,CDyESgB,CAAahB,EACtB,G","sources":["webpack://excel-custom-functions-js/./src/functions/functions.js","webpack://excel-custom-functions-js/./src/functions/functionsIF97.js"],"sourcesContent":["import \"./functionsIF97.js\";\r\nimport { addtwofromJS } from \"./functionsIF97.js\";\r\n\r\n/* global clearInterval, console, setInterval */\r\n\r\n/**\r\n * Add two numbers\r\n * @customfunction\r\n * @param {number} first First number\r\n * @param {number} second Second number\r\n * @returns {number} The sum of the two numbers.\r\n */\r\nexport function add(first, second) {\r\n  return first + second;\r\n}\r\n\r\n/**\r\n * Displays the current time once a second\r\n * @customfunction\r\n * @param {CustomFunctions.StreamingInvocation<string>} invocation Custom function invocation\r\n */\r\nexport function clock(invocation) {\r\n  const timer = setInterval(() => {\r\n    const time = currentTime();\r\n    invocation.setResult(time);\r\n  }, 1000);\r\n\r\n  invocation.onCanceled = () => {\r\n    clearInterval(timer);\r\n  };\r\n}\r\n\r\n/**\r\n * Returns the current time\r\n * @returns {string} String with the current time formatted for the current locale.\r\n */\r\nexport function currentTime() {\r\n  return new Date().toLocaleTimeString();\r\n}\r\n\r\n/**\r\n * Increments a value once a second.\r\n * @customfunction\r\n * @param {number} incrementBy Amount to increment\r\n * @param {CustomFunctions.StreamingInvocation<number>} invocation\r\n */\r\nexport function increment(incrementBy, invocation) {\r\n  let result = 0;\r\n  const timer = setInterval(() => {\r\n    result += incrementBy;\r\n    invocation.setResult(result);\r\n  }, 1000);\r\n\r\n  invocation.onCanceled = () => {\r\n    clearInterval(timer);\r\n  };\r\n}\r\n\r\n/**\r\n * Writes a message to console.log().\r\n * @customfunction LOG\r\n * @param {string} message String to write.\r\n * @returns String to write.\r\n */\r\nexport function logMessage(message) {\r\n  console.log(message);\r\n\r\n  return message;\r\n}\r\n\r\n/**\r\n * Add two Import other JS\r\n * @customfunction\r\n * @param {number} first First number\r\n * @returns {number} The add numbers.\r\n */\r\nexport function addfive(first) {\r\n  return addtwofromJS(first);\r\n}\r\n\nCustomFunctions.associate(\"ADD\", add);\nCustomFunctions.associate(\"CLOCK\", clock);\nCustomFunctions.associate(\"INCREMENT\", increment);\nCustomFunctions.associate(\"LOG\", logMessage);\nCustomFunctions.associate(\"ADDFIVE\", addfive);","// functionsIF97.js\r\n\r\nexport function addtwofromJS(first) {\r\n  return first + 5;\r\n}\r\n"],"names":["CustomFunctions","associate","first","second","invocation","timer","setInterval","time","Date","toLocaleTimeString","setResult","onCanceled","clearInterval","incrementBy","result","message","console","log","addtwofromJS"],"sourceRoot":""}